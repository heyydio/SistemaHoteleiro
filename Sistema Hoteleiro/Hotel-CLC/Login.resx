<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIADKBwAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgGAAAAXHKoZgAAAAlw
        SFlzAAALEwAACxMBAJqcGAAAB3xJREFUeJzt3b2OZMUdxuHiQwjInSASEGQGAiI+DQQWSOCMEEJuANkW
        cAOkCBJuYSPAF4BAlslJDUgEa9lebQJiERFUawh2tT09PdP9nqr/nOeRfnnPnDOvVDWr2dYAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAu4K7e8733eh/1rkiBNu/W5h17rp28cwx2X+/vvf/3fpUW7H+9v7WTd5ABnuh9
        18a/CFp33/Yeayzqpd6PbfzDlzZt3sUXG4t4uHetjX/o0s1d7z3aiPtnG/+wpW191bujEfOXNv4hS7t6
        rRHzjzb+AUu7+rQRcX/vRhv/gKVdbd5RvxoM2Pzab/TDlfbJrwUDXmnjH6y0Ty83ju71Nv7BSvu0eVc5
        MgOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmA
        AAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmA
        AAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmA
        AAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmA
        AAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmAAAOgKhmA
        AAOgKhmAAAOgKhmAgLUPwNe9qxN8Dp2dAQhY+wBc6f2h9/kEn0W7MwABBuDE3b33J/g8Oj0DEGAAbvVG
        78YEn0u3ZwACDMDtnux9P8Fn060ZgAADsJ17gfkyAAEG4HTuBebKAAQYgLO5F5gjAxBgAPbjXmB8BiDA
        AOzPvcDYDECAATgf9wLjMgABBuBi3AssnwEIMAAX515g2QxAgAE4jHuB5TIAAQbgcO4FlskABBiA43mz
        9/MEX9NlzQAEGIDjci+QywAEGIDjcy+QyQAEGIAM9wLHzwAEGIAs9wLHywAEGIA89wLHyQAEGIBluBc4
        PAMQYACW417gsAxAgAFYnnuBi2UAAgzAGO4Fzp8BCDAA47gXOF8GIMAAjOVeYP8MQIABmIN7gbMzAAEG
        YB7uBXZnAAIMwFzcC5yeAQgwAPNxL7A9AxBgAOblXuDWDEDAg+3kG7vWnjr8Wxi1+XxX2/gfvhkyAKyS
        ewEDwMq5FzAAsOp7AQMAbb3/XsAAwO/WeC9gAOAma7sXMACwxVruBQwAnGIN9wIGAHa47PcCBgDOcJnv
        BQwAnOGe3sdt/A+rAYCFPdD7Vxv/g2oAYGFP9/7Txv+QGgBY2Fu9X9r4H1ADAAu6zOd9AwA7XPbzvgGA
        U6zhvG8AYIu1nPcNANxkbed9AwC/W+N53wAsxB8FnZs/CmoAojbf1NEPdmQz/1nwNZ/3t2UAAgzAfJz3
        t2cAAgzAXJz3T88ABBiAeaz19/v7ZgACDMAcnPfPzgAEGICxnPf3zwAEGIBxnPfPlwEIMABjOO+fPwMQ
        YACW57x/sQxAgAFYjvP+YRmAAAOwDOf9wzMAAQYgz3n/OBmAAAOQ5bx/vAxAgAHIcN4/fgYgwAAcn/N+
        JgMQYACOy3k/lwEIMADH47yfzQAEGIDDbf5Dzg8m+FouewYgwAAc5rL/l9wzZQACDMDFPdn7foKvYS0Z
        gAADcDFv9n6e4POvKQMQYADOZ3Pef3+Cz73GDECAAdif8/7YDECAAdiP8/74DECAATib8/4cGYAAA3A6
        5/25MgABBmA75/35MgABBuB2zvtzZgACDMCtnPfnzQAEGIATzvvzZwACDIDzfpUMQMDaB+Dr3tUJPofO
        zgAErH0AVCcDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAA
        VCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAA
        VCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAA
        VCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAA
        VCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAAVCUDEGAA
        VCUDEGAAVCUDEGAAVCUDEGAAVCUDEPByG/9gpX36c+PoHm/jH6y0T39sHN39vRtt/MOVdvVT775GxGdt
        /AOWdvVJI+a1Nv4BS7t6tRH1ZRv/kKVtfdGIe6h3rY1/2NLNXe890ljEC70f2viHLm3avIt/aizqsd43
        bfzD17r7d/Nrv2Hu7f219982/kXQutq8c2+3k3eQwe7qPdt7t/dh74oUaPNuvdN7pndnAwAAAAAAAAAA
        AAAAAAAAAAAAAAAAOK/fAGWmITQ7Gc7PAAAAAElFTkSuQmCC
</value>
  </data>
</root>